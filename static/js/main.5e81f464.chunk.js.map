{"version":3,"sources":["components/game/Game.js","components/pic/Pic.js","components/score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Game","props","className","id","children","Pic","value","onClick","whenClicked","alt","name","src","image","key","clicked","Score","score","App","state","characters","clickedTrue","reSortChars","sort","a","b","Math","random","setState","console","log","indexOf","upTheCount","concat","resetGame","dynamicScore","this","map","character","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ysEAceA,MAXf,SAAcC,GAEZ,OACE,yBAAKC,UAAU,iBAAiBC,GAAG,kBAChCF,EAAMG,SACP,wBAAID,GAAG,QAAP,YACA,wBAAIA,GAAG,SAAP,oB,MCISE,MATf,SAAaJ,GAEX,OACE,yBAAKC,UAAU,MAAMC,GAAG,MAAMG,MAAOL,EAAME,GAAII,QAAS,kBAAMN,EAAMO,YAAYP,EAAME,MACpF,yBAAKM,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOT,GAAIF,EAAMS,KAAMG,IAAKZ,EAAME,GAAIW,QAASb,EAAMa,YCG7EC,G,KARD,SAAAd,GAAK,OAEjB,yBAAKE,GAAG,SAAR,UACUF,EAAMe,S,OCwEHC,E,2MApEbC,MAAQ,CACNC,aACAH,MAAO,EACPI,YAAa,I,EAGfC,YAAc,WACZ,IAAMF,EAAa,EAAKD,MAAMC,WAAWG,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YAE/E,EAAKC,SAAS,CAAER,eAChBS,QAAQC,IAAI,gB,EAGdrB,YAAc,SAAAL,IAC+B,IAAxC,EAAKe,MAAME,YAAYU,QAAQ3B,IAClC,EAAK4B,aACL,EAAKJ,SAAS,CACZP,YAAa,EAAKF,MAAME,YAAYY,OAAO7B,KAE7C,EAAKkB,eAEL,EAAKY,a,EAIPF,WAAa,WACX,IAAMG,EAAe,EAAKhB,MAAMF,MAAQ,EACxC,EAAKW,SAAS,CACZX,MAAOkB,IAETN,QAAQC,IAAI,qB,EAGdI,UAAY,WACV,EAAKN,SAAS,CACZX,MAAO,EACPI,YAAa,KAEfQ,QAAQC,IAAI,uBACZ,EAAKR,e,wEAGG,IAAD,OACP,OACE,yBAAKnB,UAAU,OACb,gCACE,qDAEF,kBAAC,EAAD,CAAOc,MAASmB,KAAKjB,MAAMF,QAC3B,kBAAC,EAAD,KACGmB,KAAKjB,MAAMC,WAAWiB,KAAI,SAAAC,GAAS,OAClC,kBAAC,EAAD,CACEhB,YAAa,EAAKA,YAClBR,IAAKwB,EAAUlC,GACfA,GAAIkC,EAAUlC,GACdO,KAAM2B,EAAU3B,KAChBE,MAAOyB,EAAUzB,MACjBmB,WAAY,EAAKA,WACjBE,UAAW,EAAKA,UAChBzB,YAAa,EAAKA,uB,GA7Dd8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e81f464.chunk.js","sourcesContent":["import React from 'react';\r\nimport './game.css';\r\n\r\nfunction Game(props) {\r\n\r\n  return (\r\n    <div className=\"game-container\" id=\"game-container\">\r\n      {props.children}\r\n      <h1 id=\"uwin\">You Win!</h1>\r\n      <h1 id=\"ulost\">Doh, You Lost!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport \"./pic.css\";\r\n\r\n\r\nfunction Pic(props) {\r\n\r\n  return (\r\n    <div className=\"pic\" id=\"pic\" value={props.id} onClick={() => props.whenClicked(props.id)} >\r\n      <img alt={props.name} src={props.image} id={props.name} key={props.id} clicked={props.clicked} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pic;","import React from \"react\";\r\nimport '../../App.css';\r\n\r\nconst Score = props => (\r\n\r\n  <div id=\"score\">\r\n    Score: {props.score}\r\n  </div>\r\n\r\n);\r\n\r\nexport default Score;","import React, { Component } from 'react';\nimport Game from \"./components/game/Game\"\nimport Pic from \"./components/pic/Pic\"\nimport Score from \"./components/score/Score\"\nimport './App.css';\nimport characters from \"./characters.json\";\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n    clickedTrue: []\n  }\n\n  reSortChars = () => {\n    const characters = this.state.characters.sort(function(a, b){return 0.5 - Math.random()});\n\n    this.setState({ characters });\n    console.log(\"click works\");\n  }\n\n  whenClicked = id => {\n    if(this.state.clickedTrue.indexOf(id) === -1) {\n    this.upTheCount();\n    this.setState({\n      clickedTrue: this.state.clickedTrue.concat(id)\n    })\n    this.reSortChars();\n  } else {\n    this.resetGame();\n  }\n  }\n\n  upTheCount = () => {\n    const dynamicScore = this.state.score + 1\n    this.setState({\n      score: dynamicScore\n    })\n    console.log(\"Score increased!\");\n  }\n\n  resetGame = () => {\n    this.setState({\n      score: 0,\n      clickedTrue: []\n    })\n    console.log(\"Game lost and reset\");\n    this.reSortChars();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Simpsons Clicky Game</h1>\n        </header>\n        <Score score = {this.state.score}/>\n        <Game>\n          {this.state.characters.map(character => (\n            <Pic\n              reSortChars={this.reSortChars}\n              key={character.id}\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              upTheCount={this.upTheCount}\n              resetGame={this.resetGame}\n              whenClicked={this.whenClicked}\n              />\n          ))}\n        </Game>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}